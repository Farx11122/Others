local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")
local lp = Players.LocalPlayer
local WEBHOOK_URL = "https://discord.com/api/webhooks/1428128392087076885/sihBhJ0HHS4XYXFZDqIuRNeeWRRCsftQnFuAfJLKc8iyN2TuuBnlbt3VHc__zbsIJnpD"
local cfg = {UpdateInterval = 10, MinValue = 9900000}
local lastUp = 0
local sentAnimals = {}

local function isPrivateServer()
    local privateTextObj
    pcall(function()
        privateTextObj = Workspace.Map.Codes.Main.SurfaceGui.MainFrame.PrivateServerMessage.PrivateText
    end)
    
    if privateTextObj and privateTextObj:IsA("TextLabel") then
        local function isActuallyVisible(guiObj)
            if not guiObj.Visible then return false end
            local parent = guiObj.Parent
            while parent do
                if parent:IsA("GuiObject") and not parent.Visible then
                    return false
                end
                parent = parent.Parent
            end
            return true
        end
        
        if isActuallyVisible(privateTextObj) and privateTextObj.Text == "Milestones are unavailable in Private Servers." then
            return true
        end
    end
    return false
end

local function isTimeFormat(s)
    if not s or type(s) ~= "string" then return false end
    return s:match("%d+m%s*%d+s") ~= nil or s:match("%d+m") ~= nil or s:match("%d+s") ~= nil
end

local function parseVal(s)
    if not s or type(s) ~= "string" then return 0 end
    if isTimeFormat(s) then return 0 end
    
    local cl = s:gsub("%$", ""):gsub("/s", ""):gsub("/S", ""):lower()
    local m = {k = 1e3, m = 1e6, b = 1e9, t = 1e12, q = 1e15}
    local n, su = cl:match("([%d%.]+)([kmbtq]?)")
    n = tonumber(n) or 0
    if su and m[su] then n = n * m[su] end
    return n
end

local function getDispName()
    return lp.DisplayName
end

local function isMyPlot(p)
    local s, sg = pcall(function() return p:FindFirstChild("PlotSign") end)
    if not s or not sg then return false end
    local s2, lb = pcall(function() return sg.SurfaceGui.Frame.TextLabel end)
    if not s2 or not lb then return false end
    local t = lb.Text or lb.ContentText or ""
    local n = getDispName()
    return string.find(t:lower(), n:lower()) ~= nil
end

local function findAnims(p)
    local a = {}
    local function srch(o)
        for _, c in pairs(o:GetChildren()) do
            if c.Name == "AnimalPodiums" then
                for _, pd in pairs(c:GetChildren()) do
                    local s, d = pcall(function()
                        local bs = pd:FindFirstChild("Base")
                        local sp = bs and bs:FindFirstChild("Spawn")
                        local at = sp and sp:FindFirstChild("Attachment")
                        local oh = at and at:FindFirstChild("AnimalOverhead")
                        local dp = oh and oh:FindFirstChild("DisplayName")
                        local gn = oh and oh:FindFirstChild("Generation")
                        if dp and gn then
                            local dpTxt = dp.Text or dp.ContentText or ""
                            local gnTxt = gn.Text or gn.ContentText or ""
                            return {
                                displayName = dpTxt, 
                                generation = gnTxt, 
                                position = sp.Position, 
                                object = sp,
                                value = parseVal(gnTxt)
                            }
                        end
                    end)
                    if s and d and d.displayName ~= "" then 
                        table.insert(a, d) 
                    end
                end
            else 
                srch(c) 
            end
        end
    end
    srch(p)
    return a
end

local function sendToWebhook(animals)
    if #animals == 0 then return end
    
    local jobId = game.JobId
    local playerCount = #Players:GetPlayers()
    local embeds = {}
    
    for _, animal in pairs(animals) do
        local embed = {
            ["title"] = "Valuable Brainrot Found!",
            ["color"] = 65280,
            ["fields"] = {
                {
                    ["name"] = "- Name",
                    ["value"] = animal.displayName,
                    ["inline"] = true
                },
                {
                    ["name"] = "- Value",
                    ["value"] = animal.generation,
                    ["inline"] = true
                },
                {
                    ["name"] = "- Players",
                    ["value"] = playerCount .. "/8",
                    ["inline"] = true
                },
                {
                    ["name"] = "- JobID",
                    ["value"] = "https://farukixd.github.io/JoinHub/?placeId=109983668079237&gameInstanceId=" .. jobId,
                    ["inline"] = false
                }
            },
            ["footer"] = {
                ["text"] = "Pet Finder | Backup"
            },
            ["timestamp"] = DateTime.now():ToIsoDate()
        }
        
        table.insert(embeds, embed)
    end
    
    local payload = {
        ["embeds"] = embeds,
        ["username"] = "Pet Finder"
    }
    
    local success, result = pcall(function()
        local jsonData = HttpService:JSONEncode(payload)
        
        if syn and syn.request then
            return syn.request({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        elseif request then
            return request({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        elseif http_request then
            return http_request({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        elseif fluxus and fluxus.request then
            return fluxus.request({
                Url = WEBHOOK_URL,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = jsonData
            })
        else
            return HttpService:PostAsync(WEBHOOK_URL, jsonData)
        end
    end)
end

local function findValuableAnimals()
    local valuableAnimals = {}
    local plts = Workspace:FindFirstChild("Plots")
    if not plts then 
        return valuableAnimals 
    end
    
    for _, p in pairs(plts:GetChildren()) do
        if not isMyPlot(p) then
            local anims = findAnims(p)
            for _, a in pairs(anims) do
                if a.value >= cfg.MinValue then
                    local animalKey = a.displayName .. "_" .. tostring(a.value) .. "_" .. game.JobId
                    if not sentAnimals[animalKey] then
                        table.insert(valuableAnimals, a)
                        sentAnimals[animalKey] = true
                    end
                end
            end
        end
    end
    
    return valuableAnimals
end

local function upd()
    if isPrivateServer() then return end
    
    local n = tick()
    if n - lastUp < cfg.UpdateInterval then return end
    lastUp = n
    
    local valuableAnimals = findValuableAnimals()
    
    if #valuableAnimals > 0 then
        sendToWebhook(valuableAnimals)
    end
end

local function main()
    if isPrivateServer() then
        print("ps")
        return
    end
    
    print("pub")
    upd()
    RunService.Heartbeat:Connect(upd)
end

main()
